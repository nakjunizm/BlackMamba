{"version":3,"sources":["core/compatibility/style-compatibility.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,QAAQ,EAAuB,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAC,MAAM,eAAe;AAG5F,wFAAwF;AACxF,OAAO,IAAM,iBAAiB,GAAG,ylBAoChC,CAAC;AAEF;;;;;;;;GAQG;AAIH;IACE,4BAAY,QAAkB,EAAE,UAAsB;QACpD,IAAM,OAAO,GAAG,UAAU,CAAC,aAAqB,CAAC;QACjD,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC;IAC1E,CAAC;IARH;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;SAC5B,CAAC;;0BAAA;IAOF,yBAAC;AAAD,CANA,AAMC,IAAA;AAOD;IAAA;IAOA,CAAC;IANQ,gCAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,wBAAwB;YAClC,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAVH;QAAC,QAAQ,CAAC;YACR,YAAY,EAAE,CAAC,kBAAkB,CAAC;YAClC,OAAO,EAAE,CAAC,kBAAkB,CAAC;SAC9B,CAAC;;gCAAA;IAQF,+BAAC;AAAD,CAPA,AAOC,IAAA","file":"style-compatibility.js","sourcesContent":["import {NgModule, ModuleWithProviders, Directive, Renderer, ElementRef} from '@angular/core';\n\n\n/** Selector that matches all elements that may have style collisions with material1. */\nexport const ELEMENTS_SELECTOR = `\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-dialog-container,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-ink-bar,\n  md-input,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-progress-circle,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-toolbar\n`;\n\n/**\n * Directive to apply to all material2 components that use the same element name as a\n * component in material2. It does two things:\n * 1) Adds the css class \"md2\" to the host element so that material1 can use this class with a\n *    :not() in order to avoid affecting material2 elements.\n * 2) Adds a css class to the element that is identical to the element's tag. E.g., the element\n *    `<md-card>` would be given a css class `md-card`. This is done so that material2 can style\n *    only these classes instead of defining element rules that would affect material1 components.\n */\n@Directive({\n  selector: ELEMENTS_SELECTOR,\n})\nexport class StyleCompatibility {\n  constructor(renderer: Renderer, elementRef: ElementRef) {\n    const element = elementRef.nativeElement as Node;\n    renderer.setElementClass(element, 'md2', true);\n    renderer.setElementClass(element, element.nodeName.toLowerCase(), true);\n  }\n}\n\n\n@NgModule({\n  declarations: [StyleCompatibility],\n  exports: [StyleCompatibility],\n})\nexport class StyleCompatibilityModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: StyleCompatibilityModule,\n      providers: [],\n    };\n  }\n}\n"]}