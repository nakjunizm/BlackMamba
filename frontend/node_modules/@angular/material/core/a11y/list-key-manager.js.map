{"version":3,"sources":["core/a11y/list-key-manager.ts"],"names":[],"mappings":"OACO,EAAC,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAC,MAAM,SAAS;OAE1C,EAAC,OAAO,EAAC,MAAM,cAAc;AAWpC;;;GAGG;AACH;IAIE,wBAAoB,MAA8B;QAA9B,WAAM,GAAN,MAAM,CAAwB;QAF1C,YAAO,GAAiB,IAAI,OAAO,EAAE,CAAC;IAEO,CAAC;IAMtD,sBAAI,kCAAM;QAJV;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QACrC,CAAC;;;OAAA;IAED,sBAAI,4CAAgB;aAApB;YACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;aAED,UAAqB,KAAa;YAChC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACjC,CAAC;;;OAJA;IAMD,kCAAS,GAAT,UAAU,KAAoB;QAC5B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAEO,uCAAc,GAAtB;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACpC,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACvC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,CAAC;IACxC,CAAC;IAEO,2CAAkB,GAA1B;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACpC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,CAAC;IACxC,CAAC;IAED;;;;;;;OAOG;IACK,gDAAuB,GAA/B,UAAgC,KAAa,EAAE,KAAoB;QACjE,wDAAwD;QACxD,IAAI,CAAC,iBAAiB;YACpB,CAAC,IAAI,CAAC,iBAAiB,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;QAEjE,+DAA+D;QAC/D,wDAAwD;QACxD,OAAO,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC9C,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAEH,qBAAC;AAAD,CAhEA,AAgEC,IAAA","file":"list-key-manager.js","sourcesContent":["import {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This is the interface for focusable items (used by the ListKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface MdFocusable {\n  focus(): void;\n  disabled?: boolean;\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of focusable items, it will focus the correct item when arrow events occur.\n */\nexport class ListKeyManager {\n  private _focusedItemIndex: number;\n  private _tabOut: Subject<any> = new Subject();\n\n  constructor(private _items: QueryList<MdFocusable>) {}\n\n  /**\n   * Observable that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  get tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n\n  get focusedItemIndex(): number {\n    return this._focusedItemIndex;\n  }\n\n  set focusedItemIndex(value: number) {\n    this._focusedItemIndex = value;\n  }\n\n  onKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === DOWN_ARROW) {\n      this._focusNextItem();\n    } else if (event.keyCode === UP_ARROW) {\n      this._focusPreviousItem();\n    } else if (event.keyCode === TAB) {\n      this._tabOut.next(null);\n    }\n  }\n\n  private _focusNextItem(): void {\n    const items = this._items.toArray();\n    this._updateFocusedItemIndex(1, items);\n    items[this._focusedItemIndex].focus();\n  }\n\n  private _focusPreviousItem(): void {\n    const items = this._items.toArray();\n    this._updateFocusedItemIndex(-1, items);\n    items[this._focusedItemIndex].focus();\n  }\n\n  /**\n   * This method sets focus to the correct item, given a list of items and the delta\n   * between the currently focused item and the new item to be focused. It will\n   * continue to move down the list until it finds an item that is not disabled, and it will wrap\n   * if it encounters either end of the list.\n   *\n   * @param delta the desired change in focus index\n   */\n  private _updateFocusedItemIndex(delta: number, items: MdFocusable[]) {\n    // when focus would leave menu, wrap to beginning or end\n    this._focusedItemIndex =\n      (this._focusedItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an active one\n    // is reached or the menu closes for overreaching bounds\n    while (items[this._focusedItemIndex].disabled) {\n      this._updateFocusedItemIndex(delta, items);\n    }\n  }\n\n}\n"]}