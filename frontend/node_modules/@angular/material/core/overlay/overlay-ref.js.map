{"version":3,"sources":["core/overlay/overlay-ref.ts"],"names":[],"mappings":"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","file":"overlay-ref.js","sourcesContent":["import {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\n  private _backdropElement: HTMLElement = null;\n  private _backdropClick: Subject<any> = new Subject();\n\n  constructor(\n      private _portalHost: PortalHost,\n      private _pane: HTMLElement,\n      private _state: OverlayState) { }\n\n  attach(portal: Portal<any>): any {\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    let attachResult = this._portalHost.attach(portal);\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n\n    return attachResult;\n  }\n\n  detach(): Promise<any> {\n    this._detatchBackdrop();\n    return this._portalHost.detach();\n  }\n\n  dispose(): void {\n    this._detatchBackdrop();\n    this._portalHost.dispose();\n  }\n\n  hasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n\n  backdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets the current state config of the overlay. */\n  getState() {\n    return this._state;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. **/\n  private updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n\n  /** Updates the size of the overlay based on the overlay config. */\n  updateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('md-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    this._pane.parentElement.appendChild(this._backdropElement);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => {\n      this._backdropClick.next(null);\n    });\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      this._backdropElement.classList.add('md-overlay-backdrop-showing');\n    });\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  private _detatchBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      backdropToDetach.classList.remove('md-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', () => {\n        backdropToDetach.parentNode.removeChild(backdropToDetach);\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      });\n    }\n  }\n}\n\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? value as string : `${value}px`;\n}\n"]}