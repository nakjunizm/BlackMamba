{"version":3,"sources":["slider/slider.ts"],"names":[],"mappings":"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","file":"slider.js","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    Component,\n    ElementRef,\n    Input,\n    Output,\n    ViewEncapsulation,\n    forwardRef,\n    EventEmitter,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdGestureConfig, coerceBooleanProperty, coerceNumberProperty} from '../core';\nimport {Input as HammerInput} from 'hammerjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MdSlider component. */\nexport class MdSliderChange {\n  source: MdSlider;\n  value: number;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[class.md-slider-active]': '_isActive',\n    '[class.md-slider-disabled]': 'disabled',\n    '[class.md-slider-has-ticks]': 'tickInterval',\n    '[class.md-slider-sliding]': '_isSliding',\n    '[class.md-slider-thumb-label-showing]': 'thumbLabel',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdSlider implements ControlValueAccessor {\n  /** A renderer to handle updating the slider's thumb and fill track. */\n  private _renderer: SliderRenderer = null;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect = null;\n\n  /** Whether or not the slider is disabled. */\n  private _disabled: boolean = false;\n\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether or not to show the thumb label. */\n  private _thumbLabel: boolean = false;\n\n  @Input('thumb-label')\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** The last value for which a change event was emitted. */\n  private _lastEmittedValue: number = null;\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /** The values at which the thumb will snap. */\n  private _step: number = 1;\n\n  @Input()\n  get step() { return this._step; }\n  set step(v) { this._step = coerceNumberProperty(v, this._step); }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  private _tickInterval: 'auto' | number = 0;\n\n  @Input('tick-interval')\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(v) {\n    this._tickInterval = (v == 'auto') ? v : coerceNumberProperty(v, <number>this._tickInterval);\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  get tickIntervalPercent() { return this._tickIntervalPercent; }\n\n  /** The percentage of the slider that coincides with the value. */\n  private _percent: number = 0;\n\n  get percent() { return this._clamp(this._percent); }\n\n  /** Value of the slider. */\n  private _value: number = null;\n\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\n\n  /** The miniumum value that the slider can have. */\n  private _min: number = 0;\n\n  @Input()\n  get min() {\n    return this._min;\n  }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this.value);\n  }\n\n  /** The maximum value that the slider can have. */\n  private _max: number = 100;\n\n  @Input()\n  get max() {\n    return this._max;\n  }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this.value);\n  }\n\n  get trackFillFlexBasis() {\n    return this.percent * 100 + '%';\n  }\n\n  get ticksMarginLeft() {\n    return this.tickIntervalPercent / 2 * 100 + '%';\n  }\n\n  get ticksContainerMarginLeft() {\n    return '-' + this.ticksMarginLeft;\n  }\n\n  get ticksBackgroundSize() {\n    return this.tickIntervalPercent * 100 + '% 2px';\n  }\n\n  @Output() change = new EventEmitter<MdSliderChange>();\n\n  constructor(elementRef: ElementRef) {\n    this._renderer = new SliderRenderer(elementRef);\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isActive = true;\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition(event.clientX);\n    this._emitValueIfChanged();\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition(event.center.x);\n  }\n\n  _onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._isActive = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition(event.center.x);\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n\n  _onBlur() {\n    this._isActive = false;\n    this.onTouched();\n  }\n\n  /**\n   * Calculate the new value from the new physical location. The value will always be snapped.\n   */\n  private _updateValueFromPosition(pos: number) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this._sliderDimensions.left;\n    let size = this._sliderDimensions.width;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((pos - offset) / size);\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitValueIfChanged() {\n    if (this.value != this._lastEmittedValue) {\n      let event = new MdSliderChange();\n      event.source = this;\n      event.value = this.value;\n      this.change.emit(event);\n      this._controlValueAccessorChangeFn(this.value);\n      this._lastEmittedValue = this.value;\n    }\n  }\n\n  /**\n   * Updates the amount of space between ticks as a percentage of the width of the slider.\n   */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let pixelsPerStep = this._sliderDimensions.width * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / (this._sliderDimensions.width);\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /**\n   * Calculates the percentage of the slider that a value is.\n   */\n  private _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n   * Calculates the value a percentage of the slider corresponds to.\n   */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /**\n   * Return a number between two numbers.\n   */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n */\nexport class SliderRenderer {\n  private _sliderElement: HTMLElement;\n\n  constructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  getSliderDimensions() {\n    let trackElement = this._sliderElement.querySelector('.md-slider-track');\n    return trackElement.getBoundingClientRect();\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  addFocus() {\n    this._sliderElement.focus();\n  }\n}\n\n\n@NgModule({\n  imports: [FormsModule],\n  exports: [MdSlider],\n  declarations: [MdSlider],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: MdGestureConfig},\n  ],\n})\nexport class MdSliderModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSliderModule,\n      providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: MdGestureConfig}]\n    };\n  }\n}\n"]}