{"version":3,"sources":["dialog/dialog.ts"],"names":[],"mappings":"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","file":"dialog.js","sourcesContent":["import {NgModule, ModuleWithProviders, Injector, ComponentRef, Injectable} from '@angular/core';\nimport {\n  Overlay,\n  OverlayModule,\n  PortalModule,\n  OverlayRef,\n  OverlayState,\n  ComponentPortal,\n  OVERLAY_PROVIDERS,\n} from '../core';\nimport {ComponentType} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogContainer} from './dialog-container';\nimport {A11yModule, InteractivityChecker} from '../core';\nimport {extendObject} from '../core/util/object-extend';\n\nexport {MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\n\n// TODO(jelbourn): add support for opening with a TemplateRef\n// TODO(jelbourn): add `closeAll` method\n// TODO(jelbourn): default dialog config\n// TODO(jelbourn): escape key closes dialog\n// TODO(jelbourn): dialog content directives (e.g., md-dialog-header)\n// TODO(jelbourn): animations\n\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MdDialog {\n  constructor(private _overlay: Overlay, private _injector: Injector) { }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param component Type of the component to load into the load.\n   * @param config\n   */\n  open<T>(component: ComponentType<T>, config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let overlayRef = this._createOverlay(config);\n    let dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n    return this._attachDialogContent(component, dialogContainer, overlayRef);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param dialogConfig The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(dialogConfig: MdDialogConfig): OverlayRef {\n    let overlayState = this._getOverlayState(dialogConfig);\n    return this._overlay.create(overlayState);\n  }\n\n  /**\n   * Attaches an MdDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let viewContainer = config ? config.viewContainerRef : null;\n    let containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance.dialogConfig = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MdDialogContainer.\n   * @param component The type of component being loaded into the dialog.\n   * @param dialogContainer Reference to the wrapping MdDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @returns A promise resolving to the MdDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      component: ComponentType<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef): MdDialogRef<T> {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let dialogRef = <MdDialogRef<T>> new MdDialogRef(overlayRef);\n\n    if (!dialogContainer.dialogConfig.disableClose) {\n      // When the dialog backdrop is clicked, we want to close it.\n      overlayRef.backdropClick().first().subscribe(() => dialogRef.close());\n    }\n\n    // Set the dialogRef to the container so that it can use the ref to close the dialog.\n    dialogContainer.dialogRef = dialogRef;\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let dialogInjector = new DialogInjector(dialogRef, this._injector);\n\n    let contentPortal = new ComponentPortal(component, null, dialogInjector);\n\n    let contentRef = dialogContainer.attachComponentPortal(contentPortal);\n    dialogRef.componentInstance = contentRef.instance;\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates an overlay state from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let state = new OverlayState();\n\n    state.hasBackdrop = true;\n    state.positionStrategy = this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .centerVertically();\n\n    return state;\n  }\n}\n\n/**\n * Applies default options to the dialog config.\n * @param dialogConfig Config to be modified.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(dialogConfig: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), dialogConfig);\n}\n\n\n@NgModule({\n  imports: [OverlayModule, PortalModule, A11yModule],\n  exports: [MdDialogContainer],\n  declarations: [MdDialogContainer],\n  entryComponents: [MdDialogContainer],\n})\nexport class MdDialogModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdDialogModule,\n      providers: [MdDialog, OVERLAY_PROVIDERS, InteractivityChecker],\n    };\n  }\n}\n"]}